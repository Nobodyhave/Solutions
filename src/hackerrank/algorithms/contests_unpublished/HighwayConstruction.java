package hackerrank.algorithms.contests_unpublished;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.math.BigInteger;
import java.util.Scanner;

/**
 * Created by Aleksandr on 17/11/2017.
 * Project Solutions
 * <p>
 * https://www.hackerrank.com/contests/w35/challenges/highway-construction
 */
public class HighwayConstruction {
    private static final long MOD = 1000000009;
    private static final BigInteger MOD_BIG = BigInteger.valueOf(1000000009);
    private static final long[][] PASCAL = new long[1002][1002];
    private static final long[] BERNOULLI = new long[]{1, 500000005, 833333341, 0, 633333339, 0, 976190485, 0, 633333339, 0, 469696974, 0, 160805862, 0, 833333342, 0, 574509802, 0, 607769484, 0, 269696443, 0, 7252569, 0, 160719282, 0, 834758858, 0, 88793724, 0, 375425307, 0, 458194177, 0, 447972532, 0, 840005835, 0, 147911937, 0, 906304171, 0, 835100855, 0, 790434390, 0, 18465409, 0, 219852826, 0, 729430218, 0, 549724558, 0, 185958893, 0, 966180022, 0, 875441660, 0, 163991022, 0, 122478099, 0, 356692668, 0, 852972500, 0, 843757650, 0, 263617252, 0, 612272568, 0, 983136603, 0, 460777770, 0, 440931647, 0, 1931634, 0, 537844370, 0, 329269021, 0, 664160220, 0, 301809573, 0, 147947308, 0, 209437816, 0, 487053062, 0, 903512931, 0, 38883016, 0, 399980359, 0, 832893605, 0, 137659912, 0, 32046654, 0, 96201969, 0, 272382393, 0, 984809722, 0, 567516997, 0, 277826241, 0, 129450247, 0, 859219181, 0, 495505064, 0, 8707610, 0, 149991844, 0, 197841389, 0, 415837901, 0, 452556555, 0, 255969333, 0, 587269527, 0, 263414781, 0, 832704626, 0, 646359153, 0, 886506266, 0, 485734315, 0, 770784160, 0, 229289872, 0, 784336735, 0, 410524300, 0, 585080214, 0, 141553402, 0, 425223057, 0, 237545850, 0, 63589729, 0, 33858933, 0, 325120530, 0, 395472691, 0, 961112492, 0, 920184514, 0, 418233316, 0, 328311025, 0, 88615861, 0, 818164287, 0, 583547044, 0, 880260567, 0, 227383121, 0, 652754015, 0, 195906609, 0, 143074934, 0, 826044587, 0, 387905283, 0, 604711815, 0, 42021458, 0, 18853119, 0, 261939927, 0, 570870708, 0, 936427877, 0, 22903034, 0, 332187245, 0, 174614373, 0, 11038394, 0, 363254813, 0, 525874981, 0, 658368378, 0, 396296094, 0, 783547564, 0, 20855970, 0, 562367802, 0, 949243780, 0, 211426253, 0, 798316326, 0, 2189158, 0, 549188555, 0, 65168462, 0, 558688513, 0, 614620286, 0, 597722193, 0, 560494311, 0, 673146368, 0, 51251074, 0, 481381363, 0, 701221794, 0, 610905740, 0, 538953990, 0, 735130715, 0, 122194196, 0, 840631161, 0, 315715642, 0, 476095583, 0, 89037894, 0, 197626168, 0, 379851231, 0, 352939984, 0, 1603881, 0, 495686568, 0, 452061366, 0, 22791554, 0, 467084765, 0, 112929067, 0, 26339868, 0, 641824014, 0, 151097054, 0, 27572593, 0, 128712039, 0, 336837738, 0, 136194315, 0, 827051682, 0, 733043040, 0, 940867749, 0, 601253373, 0, 77767278, 0, 414299962, 0, 932037775, 0, 738226723, 0, 239077453, 0, 393853968, 0, 722937698, 0, 91409035, 0, 545345048, 0, 114641356, 0, 148877819, 0, 262317365, 0, 250818962, 0, 921863573, 0, 594138284, 0, 216245249, 0, 268198006, 0, 644235673, 0, 45020701, 0, 15197600, 0, 932257660, 0, 233031406, 0, 893606130, 0, 102728268, 0, 844873407, 0, 402162002, 0, 818789428, 0, 29315973, 0, 246877693, 0, 786369190, 0, 190539628, 0, 650370482, 0, 336782181, 0, 307008561, 0, 182715307, 0, 32544774, 0, 199166544, 0, 936317371, 0, 472944157, 0, 996413699, 0, 308540076, 0, 724760508, 0, 278710238, 0, 728549643, 0, 895187549, 0, 597018742, 0, 891332152, 0, 213314275, 0, 232858337, 0, 769598130, 0, 60714296, 0, 513821745, 0, 334412618, 0, 355998556, 0, 155515182, 0, 272958997, 0, 91080539, 0, 289948741, 0, 18208039, 0, 228396089, 0, 685375239, 0, 932013571, 0, 354972820, 0, 142772925, 0, 327077220, 0, 147126894, 0, 545255853, 0, 326621095, 0, 150434414, 0, 41482011, 0, 669751880, 0, 517959223, 0, 39900214, 0, 101166409, 0, 590690618, 0, 455010719, 0, 605684678, 0, 317918217, 0, 211140566, 0, 435382484, 0, 401548394, 0, 598150259, 0, 526705503, 0, 214208303, 0, 973980798, 0, 259608707, 0, 651883296, 0, 640931689, 0, 709670733, 0, 845424175, 0, 910642853, 0, 117887071, 0, 940539107, 0, 447181503, 0, 775851453, 0, 798595153, 0, 646557270, 0, 598371650, 0, 182121197, 0, 216655153, 0, 233674960, 0, 348110444, 0, 969342628, 0, 941227791, 0, 927291817, 0, 548282982, 0, 35494838, 0, 193345727, 0, 634083526, 0, 848413421, 0, 692263441, 0, 141039063, 0, 420990465, 0, 99968958, 0, 885427102, 0, 974652496, 0, 710104495, 0, 758887858, 0, 657847149, 0, 905536919, 0, 138925594, 0, 961365471, 0, 792067907, 0, 830174595, 0, 887505348, 0, 856653405, 0, 66520656, 0, 464436811, 0, 931952940, 0, 183318987, 0, 89044938, 0, 470198525, 0, 100406774, 0, 2440362, 0, 314128474, 0, 443702464, 0, 253825927, 0, 458301637, 0, 517281429, 0, 216517109, 0, 115148439, 0, 352788208, 0, 524532489, 0, 731457312, 0, 867734240, 0, 702581780, 0, 384432913, 0, 998018408, 0, 799667103, 0, 766683031, 0, 255467277, 0, 769679929, 0, 446799771, 0, 506785884, 0, 90367510, 0, 810460783, 0, 390906268, 0, 739257138, 0, 173415006, 0, 188140175, 0, 540061588, 0, 567270286, 0, 424512513, 0, 502150529, 0, 213408829, 0, 413161595, 0, 961560788, 0, 510494972, 0, 838316082, 0, 879558681, 0, 830705431, 0, 591747767, 0, 237101735, 0, 140378135, 0, 852001724, 0, 331668928, 0, 708252241, 0, 68662461, 0, 182555116, 0, 893538359, 0, 936149439, 0, 951194459, 0, 486306514, 0, 271650811, 0, 699214099, 0, 765695912, 0, 19806886, 0, 205867235, 0, 580303862, 0, 31389524, 0, 219423408, 0, 665425392, 0, 799852916, 0, 744435881, 0, 762868613, 0, 310465177, 0, 526023846, 0, 658432441, 0, 742149662, 0, 110910902, 0, 258750411, 0, 409162808, 0, 977047796, 0, 43894115, 0, 480488643, 0, 268465155, 0, 100559602, 0, 867519227, 0, 633379197, 0, 98138438, 0, 916305323, 0, 103527234, 0, 695952670, 0, 51702511, 0, 697247040, 0, 269625520, 0, 512484589, 0, 959771857, 0, 139799501, 0, 182818844, 0, 360880892, 0, 676601375, 0, 571409550, 0, 423527592, 0, 998937450, 0, 911882358, 0, 357372431, 0, 569826883, 0, 927762812, 0, 789489021, 0, 941796576, 0, 176041796, 0, 72554256, 0, 301167323, 0, 13654611, 0, 452813689, 0, 51503670, 0, 762831889, 0, 585781233, 0, 121672429, 0, 305331100, 0, 967289676, 0, 154103581, 0, 257678198, 0, 977205795, 0, 980551098, 0, 223350161, 0, 894968118, 0, 917907055, 0, 808738276, 0, 937225992, 0, 468349251, 0, 940092683, 0, 30717348, 0, 712135863, 0, 612214371, 0, 200486087, 0, 936406892, 0, 100110001, 0, 427337831, 0, 945651565, 0, 236598252, 0, 690549125, 0, 394737961, 0, 776706329, 0, 299478746, 0, 658529836, 0, 307757330, 0, 566747663, 0, 710125911, 0, 827130658, 0, 9983955, 0, 323916365, 0, 607915625, 0, 685905468, 0, 972001040, 0, 682676454, 0, 310811738, 0, 774922757, 0, 644321926, 0, 512199688, 0, 643906074, 0, 46604419, 0, 857891194, 0, 529476487, 0, 909815091, 0, 734569750, 0, 169167645, 0, 574820238, 0, 181574243, 0, 395929881, 0, 329346463, 0, 236503503, 0, 481065962, 0, 660068394, 0, 39488967, 0, 767760914, 0, 846703781, 0, 131607844, 0, 31944430, 0, 57414656, 0, 103890805, 0, 262746099, 0, 414410559, 0, 887714003, 0, 318008553, 0, 264525958, 0, 313716146, 0, 417633607, 0, 298841184, 0, 773043888, 0, 111856336, 0, 863238900, 0, 906822925, 0, 696923996, 0, 114496374, 0, 434214180, 0, 200788426, 0, 428710692, 0, 644886298, 0, 520452372, 0, 337637872, 0, 113445988, 0, 647989717, 0, 17926007, 0, 750915521, 0, 147574031, 0, 620849157, 0, 433572160, 0, 270718319, 0, 404134457, 0, 242824034, 0, 212675460, 0, 812599908, 0, 693194593, 0, 370922888, 0, 886952955, 0, 700862511, 0, 714683457, 0, 266781052, 0, 254450987, 0, 104223891};

    private static int highwayConstruction(long n, int p) {
        final BigInteger N = BigInteger.valueOf(n - 1);
        long sum = 0;
        for (int j = 0; j <= p; j++) {
            sum += (((PASCAL[p + 1][j] * BERNOULLI[j]) % MOD) * modPowByExponent(N, p + 1 - j, MOD_BIG)) % MOD;
            sum %= MOD;
        }

        final int result = (int) ((sum * BigInteger.valueOf(p + 1).modInverse(MOD_BIG).longValue()) % MOD);

        return result != 0 ? result - 1 : result;
    }

    private static void calculatePascalTriangle() {
        PASCAL[0][0] = 1;
        PASCAL[1][0] = 1;
        PASCAL[1][1] = 1;

        for (int i = 2; i < 1002; i++) {
            PASCAL[i][0] = 1;
            for (int j = 1; j < i; j++) {
                PASCAL[i][j] = (PASCAL[i - 1][j - 1] + PASCAL[i - 1][j]) % MOD;
            }
            PASCAL[i][i] = 1;
        }
    }

    private static long modPowByExponent(BigInteger x, long exp, BigInteger mod) {
        if (mod.compareTo(BigInteger.ONE) == 0) {
            return 0;
        }

        BigInteger result = BigInteger.ONE;
        BigInteger base = x.mod(mod);

        while (exp > 0) {
            if (exp % 2 == 1) {
                result = (result.multiply(base)).mod(mod);
            }
            exp = exp >> 1;
            base = base.multiply(base).mod(mod);
        }

        return result.longValue();
    }

    public static void main(String[] args) throws FileNotFoundException {
        //final Scanner in = new Scanner(System.in);
        final Scanner in = new Scanner(new FileInputStream("C:\\Projects\\Solutions\\src\\tests.txt"));
        calculatePascalTriangle();
        final int Q = in.nextInt();
        for (int q = 0; q < Q; q++) {
            final long n = in.nextLong();
            final int k = in.nextInt();
            final int result = highwayConstruction(n, k);
            System.out.println(result);
        }
        in.close();
    }
}
